PREFIX sp: <http://spinrdf.org/sp#>
PREFIX spin: <http://spinrdf.org/spin#>
PREFIX spl: <http://spinrdf.org/spl#>
PREFIX example: <http://www.example.org/ontology#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ephedra: <http://www.metaphacts.com/ontologies/platform/ephedra#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX api: <http://purl.org/linked-data/api/vocab#>
PREFIX ices: <http://sid.ices.dk/Services/odata4/$metadata#>
PREFIX : <http://www.metaphacts.com/ontologies/platform/service/custom#>


ephedra:icesapi a ephedra:Service ;
	<http://www.openrdf.org/config/sail#sailType> "metaphacts:RESTService" ;
	<http://www.w3.org/2000/01/rdf-schema#label> "A wrapper for ICES REST API." ;
  ephedra:hasSPARQLPattern (
# INPUTS
    [
      sp:subject :_results ;
      sp:predicate api:filter ;
      sp:object :_\$filter
    ]
# OUTPUTS
    [
      sp:subject :_results ;
      sp:predicate ices:assessmentKey ;
      sp:object :_AssessmentKey
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:stockDatabaseID ;
      sp:object :_StockDatabaseID
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:stockKey ;
      sp:object :_StockKey
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:stockKeyLabel ;
      sp:object :_StockKeyLabel
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:activeYear ;
      sp:object :_ActiveYear
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:speciesScientificName ;
      sp:object :_SpeciesScientificName
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:speciesCommonName ;
      sp:object :_SpeciesCommonName
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:ecoRegion ;
      sp:object :_EcoRegion
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:expertGroup ;
      sp:object :_ExpertGroup
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:expertGroupDescription ;
      sp:object :_ExpertGroupDescription
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:dataCategory ;
      sp:object :_DataCategory
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:yearOfLastAssessment ;
      sp:object :_YearOfLastAssessment
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:assessmentType ;
      sp:object :_AssessmentType
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:PABufferApplied ;
      sp:object :_PABufferApplied
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:trophicGuild ;
      sp:object :_TrophicGuild
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:sizeGuild ;
      sp:object :_SizeGuild
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:published ;
      sp:object :_Published
    ]
    [
      sp:subject :_results ;
      sp:predicate ices:generatedOn ;
      sp:object :_GeneratedOn
    ]
	) ;
# INPUTS  
	spin:constraint
  [
    a spl:Argument ;
    rdfs:comment "Filter" ;
    spl:predicate :_\$filter ;
    spl:valueType xsd:string
    ] ;   
# OUTPUTS
     spin:column
	[
		a spin:Column ;
		rdfs:comment "results" ;
		spl:predicate :_results ;
		spl:valueType rdfs:Resource;
		ephedra:jsonPath "$.value[*]"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "stock db ID" ;
		spl:predicate :_StockDatabaseID ;
		spl:valueType xsd:integer;
		ephedra:jsonPath "$.StockDatabaseID"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "stock key" ;
		spl:predicate :_StockKey ;
		spl:valueType xsd:integer;
		ephedra:jsonPath "$.StockKey"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "stock key label" ;
		spl:predicate :_StockKeyLabel ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.StockKeyLabel"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "active year" ;
		spl:predicate :_ActiveYear ;
		spl:valueType xsd:integer;
		ephedra:jsonPath "$.ActiveYear"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "species scientific name" ;
		spl:predicate :_SpeciesScientificName ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.SpeciesScientificName"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "species common name" ;
		spl:predicate :_SpeciesCommonName ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.SpeciesCommonName"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "eco region" ;
		spl:predicate :_EcoRegion ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.EcoRegion"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "expert group" ;
		spl:predicate :_ExpertGroup ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.ExpertGroup"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "expert group description" ;
		spl:predicate :_ExpertGroupDescription ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.ExpertGroupDescription"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "data category" ;
		spl:predicate :_DataCategory ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.DataCategory"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "year of last assessent" ;
		spl:predicate :_YearOfLastAssessment ;
		spl:valueType xsd:integer;
		ephedra:jsonPath "$.YearOfLastAssessment"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "assessment type" ;
		spl:predicate :_AssessmentType ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.AssessmentType"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "PA buffer applied" ;
		spl:predicate :_PABufferApplied ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.PABufferApplied"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "trophic guild" ;
		spl:predicate :_TrophicGuild ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.TrophicGuild"
	] ;
     spin:column
	[
		a spin:Column ;
		rdfs:comment "size guild" ;
		spl:predicate :_SizeGuild ;
		spl:valueType xsd:string;
		ephedra:jsonPath "$.SizeGuild"
	] ;
  spin:column
  [
    a spin:Column ;
    rdfs:comment "published" ;
    spl:predicate :_Published ;
    spl:valueType xsd:boolean;
    ephedra:jsonPath "$.Published"
  ] ;
   spin:column
	[
		a spin:Column ;
		rdfs:comment "generated on" ;
		spl:predicate :_GeneratedOn ;
		spl:valueType xsd:date;
		ephedra:jsonPath "$.GeneratedOn"
	] ;
   spin:column
	[
		a spin:Column ;
		rdfs:comment "assessment key" ;
		spl:predicate :_AssessmentKey ;
		spl:valueType xsd:integer;
		ephedra:jsonPath "$.AssessmentKey"
	] .